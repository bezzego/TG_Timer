import logging
import os
import time
from datetime import datetime, timedelta

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackQueryHandler, CallbackContext
)

import dateparser
from pytimeparse import parse as parse_simple
import progressbar

from storage import Storage
from voice import Voice


def parse_natural_text(text: str):
    """
    –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è ¬´–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 5 —É—Ç—Ä–∞¬ª, ¬´30s¬ª, ¬´—á–µ—Ä–µ–∑ 2h¬ª, ¬´–ø–æ–≤—Ç–æ—Ä–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç¬ª –∏ —Ç.–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (seconds, is_repeating).
    seconds = –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ (int)
    is_repeating = bool (True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä)
    –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (None, False).
    """
    txt = text.strip().lower()

    # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã ¬´–ø–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä¬ª, ¬´—Å–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–≤–∞–ª¬ª, ¬´–ø–æ–≤—Ç–æ—Ä–∏¬ª, ¬´—á–µ—Ä–µ–∑¬ª, etc.
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ replacements
    placeholders = [
        "–ø–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞",
        "—Å–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
        "–∑–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞",
        "–ø–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞",
        "—Å–¥–µ–ª–∞–π —Ç–∞–π–º–µ—Ä –Ω–∞"
    ]
    for ph in placeholders:
        if ph in txt:
            txt = txt.replace(ph, "")

    # check is repeating
    repeating = False
    if "–ø–æ–≤—Ç–æ—Ä" in txt or "–∫–∞–∂–¥" in txt:  # ¬´–ø–æ–≤—Ç–æ—Ä—è–π¬ª, ¬´–∫–∞–∂–¥—ã–µ¬ª
        repeating = True
        # —É–±–∏—Ä–∞–µ–º ¬´–ø–æ–≤—Ç–æ—Ä¬ª, ¬´–∫–∞–∂–¥—ã–µ¬ª
        txt = txt.replace("–ø–æ–≤—Ç–æ—Ä—è–π", "")
        txt = txt.replace("–ø–æ–≤—Ç–æ—Ä", "")
        txt = txt.replace("–∫–∞–∂–¥—ã–µ", "")
        txt = txt.replace("–∫–∞–∂–¥—ã–π", "")
        txt = txt.strip()

    # ¬´–Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª -> ¬´–∑–∞–≤—Ç—Ä–∞¬ª
    txt = txt.replace("–Ω–∞ –∑–∞–≤—Ç—Ä–∞", "–∑–∞–≤—Ç—Ä–∞")
    # ¬´ —É—Ç—Ä–∞¬ª -> ¬´ am¬ª, ¬´ –≤–µ—á–µ—Ä–∞¬ª -> ¬´ pm¬ª
    txt = txt.replace("—É—Ç—Ä–∞", " am")
    txt = txt.replace("–≤–µ—á–µ—Ä–∞", " pm")
    txt = txt.strip()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º dateparser (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞–≥–∏—è)
    dt = dateparser.parse(txt, languages=["ru"], settings={"PREFER_DATES_FROM": "future"})
    if dt:
        now = datetime.now()
        if dt <= now:
            # –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º
            return (None, repeating)
        secs = int((dt - now).total_seconds())
        return (secs, repeating)

    # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º pytimeparse, —Ç–∏–ø–∞ ¬´30s¬ª, ¬´2h30m¬ª –∏ —Ç. –ø.
    secs2 = parse_simple(txt)
    if secs2 and secs2 > 0:
        return (secs2, repeating)

    return (None, repeating)


class TimerBot:
    def __init__(self, token: str, storage: Storage, voice: Voice):
        self.logger = logging.getLogger("TimerBot")
        self.storage = storage
        self.voice = voice
        self.updater = Updater(token=token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.job_queue = self.updater.job_queue

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.dispatcher.add_handler(CommandHandler("start", self.cmd_start))
        self.dispatcher.add_handler(CommandHandler("timers", self.cmd_timers))
        self.dispatcher.add_handler(CommandHandler("repeat", self.cmd_repeat))
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_text))
        self.dispatcher.add_handler(MessageHandler(Filters.voice, self.handle_voice))
        self.dispatcher.add_handler(CallbackQueryHandler(self.handle_callback))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∏–∑ JSON (active + repeat)
        self.restore_timers()

    def run(self):
        self.logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        self.updater.start_polling()
        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        self.updater.idle()

    def cmd_start(self, update: Update, context: CallbackContext):
        chat_id = update.effective_chat.id

        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢–∞–π–º–µ—Ä-–ë–æ—Ç.*\n\n"
            "‚è≥ –Ø —É–º–µ—é —Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è:\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏: `30s`, `1m`, `2h`, `–∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞`, `—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç`\n"
            "‚Ä¢ –ò–ª–∏ —Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º: _–ø–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç_, _–ø–æ–≤—Ç–æ—Ä—è–π –∫–∞–∂–¥—ã–π —á–∞—Å_\n\n"
            "üîÅ *–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–∞–π–º–µ—Ä—ã:*\n"
            "`/repeat 10m` ‚Äî –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
            "–∏–ª–∏ –≥–æ–ª–æ—Å–æ–º: _–ø–æ–≤—Ç–æ—Ä—è–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç_\n\n"
            "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
            "`/timers` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n"
            "`/repeat` ‚Äî –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä\n\n"
            "üõ†Ô∏è *–ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:*\n"
            "‚Ä¢ üõë –°—Ç–æ–ø ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
            "‚Ä¢ üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
            "‚Ä¢ ‚ûï –û—Ç–ª–æ–∂–∏—Ç—å ‚Äî –Ω–∞ 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ üîî –í—ã–±—Ä–∞—Ç—å –∑–≤—É–∫ ‚Äî –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–ì–æ—Ç–æ–≤? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ üéôÔ∏è"
        )

        # Inline-–∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –∑–≤—É–∫"
        keyboard = [[InlineKeyboardButton("üîî –í—ã–±—Ä–∞—Ç—å –∑–≤—É–∫", callback_data="choose_sound")]]
        update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


    def cmd_timers(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤."""
        chat_id = update.effective_chat.id
        data = self.storage.data
        # –ê–∫—Ç–∏–≤–Ω—ã–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ) + –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
        active_one = [t for t in data["active"] if t["chat_id"] == chat_id]
        active_rep = [t for t in data["repeat"] if t["chat_id"] == chat_id]
        completed = [t for t in data["completed"] if t["chat_id"] == chat_id]

        msg_lines = []
        msg_lines.append("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:")
        if not active_one and not active_rep:
            msg_lines.append("  ‚Äì –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤")
        else:
            for t in active_one:
                dur = t["duration"]
                msg_lines.append(f"  [ID {t['id']}] –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π: {dur} —Å–µ–∫ (–æ—Å—Ç–∞–ª–æ—Å—å ~...)")

            for t in active_rep:
                interval = t["interval"]
                msg_lines.append(f"  [ID {t['id']}] –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫")

        msg_lines.append("\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—è):")
        if not completed:
            msg_lines.append("  ‚Äì –ø—É—Å—Ç–æ")
        else:
            for c in completed[-5:]:  # –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                if c.get("repeating"):
                    msg_lines.append(f"  [ID {c['id']}] –ü–æ–≤—Ç–æ—Ä (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                else:
                    d = c["duration"]
                    msg_lines.append(f"  [ID {c['id']}] –¢–∞–π–º–µ—Ä –Ω–∞ {d} —Å–µ–∫ (–∑–∞–≤–µ—Ä—à—ë–Ω)")

        text = "\n".join(msg_lines)
        update.message.reply_text(text)

    def cmd_repeat(self, update: Update, context: CallbackContext):
        """
        /repeat <interval>
        """
        chat_id = update.effective_chat.id
        args = context.args
        if not args:
            update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /repeat 30s –∏–ª–∏ /repeat –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ö–∏—Ç—Ä–æ)")
            return

        user_input = " ".join(args)
        secs, repeating = parse_natural_text(user_input)
        if not secs or secs <= 0:
            update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü—Ä–∏–º–µ—Ä: /repeat 30s")
            return
        # –†–∞–∑ —É–∂–µ /repeat, –º—ã —Ç–æ—á–Ω–æ —Å—Ç–∞–≤–∏–º –ø–æ–≤—Ç–æ—Ä
        self.start_repeating_timer(chat_id, secs)

    def handle_text(self, update: Update, context: CallbackContext):
        chat_id = update.effective_chat.id
        text = update.message.text
        secs, is_rep = parse_natural_text(text)
        if not secs or secs <= 0:
            update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 30s, –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞, –∏ —Ç.–¥.")
            return

        # +1 —Å–µ–∫—É–Ω–¥–∞, —á—Ç–æ–±—ã –Ω–µ "—É–∫—Ä–∞–¥—ã–≤–∞–ª–æ"
        corrected_secs = secs + 1

        if is_rep:
            self.start_repeating_timer(chat_id, corrected_secs)
        else:
            self.start_one_time_timer(chat_id, corrected_secs)

    def handle_voice(self, update: Update, context: CallbackContext):
        """–ì–æ–ª–æ—Å–æ–≤–æ–µ -> —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º -> –ø–∞—Ä—Å–∏–º -> —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä."""
        chat_id = update.effective_chat.id
        voice_file = update.message.voice.get_file()
        temp_path = f"voice_{update.message.message_id}.ogg"
        voice_file.download(temp_path)

        recognized = self.voice.recognize(temp_path)
        try:
            os.remove(temp_path)
        except:
            pass

        if not recognized:
            update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ.")
            return

        # –ü–∞—Ä—Å–∏–º
        secs, is_rep = parse_natural_text(recognized)
        if not secs or secs <= 0:
            update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        # +1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
        corrected_secs = secs + 1

        if is_rep:
            self.start_repeating_timer(chat_id, corrected_secs)
        else:
            self.start_one_time_timer(chat_id, corrected_secs)

    def handle_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫."""
        query = update.callback_query
        data = query.data
        chat_id = query.message.chat_id
        query.answer()  # —Å–∫—Ä—ã–≤–∞–µ–º ¬´–∑–∞–≥—Ä—É–∑–∫–∞¬ª

        if data == "choose_sound":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–≤—É–∫–æ–≤
            # –í demos: "bell", "siren", "melody"
            kb = [
                [InlineKeyboardButton("üîî –ö–æ–ª–æ–∫–æ–ª", callback_data="sound_bell"),
                 InlineKeyboardButton("üì¢ –°–∏—Ä–µ–Ω–∞", callback_data="sound_siren")],
                [InlineKeyboardButton("üéµ –ú–µ–ª–æ–¥–∏—è", callback_data="sound_melody")]
            ]
            query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(kb))
        elif data.startswith("sound_"):
            # –≤—ã–±—Ä–∞–ª–∏ –∑–≤—É–∫
            choice = data.split("sound_")[1]
            # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ storage
            self.storage.data["settings"]["sound"] = choice
            self.storage.save()
            query.edit_message_text(f"–ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{choice}'!")
        elif data.startswith("cancel_timer:"):
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–°—Ç–æ–ø/–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä¬ª
            tid = int(data.split(":")[1])
            self.cancel_timer(chat_id, tid, from_callback=True, message_id=query.message.message_id)
        elif data.startswith("repeat_timer:"):
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª (üîÅ)
            tid = int(data.split(":")[1])
            self.repeat_finished_timer(chat_id, tid, query.message.message_id)
        elif data.startswith("snooze_timer:"):
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–ª–æ–∂–∏—Ç—å¬ª (‚ûï)
            tid = int(data.split(":")[1])
            self.snooze_timer(chat_id, tid, query.message.message_id)
        else:
            self.logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {data}")

    # ========== –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ ==========

    def start_one_time_timer(self, chat_id: int, secs: int):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä."""
        start_ts = time.time()
        end_ts = start_ts + secs

        timer_id = self.storage.allocate_new_id()
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bar = progressbar.render_progressbar(secs, secs)
        text = f"–¢–∞–π–º–µ—Ä –Ω–∞ {secs} —Å–µ–∫!\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {secs} —Å–µ–∫—É–Ω–¥\n{bar}"
        kb = [[InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"cancel_timer:{timer_id}")]]
        msg = self.updater.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(kb))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        entry = {
            "id": timer_id,
            "chat_id": chat_id,
            "start": int(start_ts),
            "duration": secs,
            "end_ts": int(end_ts),
            "message_id": msg.message_id,
            "repeating": False
        }
        self.storage.add_active_timer(entry)
        # –°—Ç–∞–≤–∏–º –¥–∂–æ–±—É –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        finish_job = self.job_queue.run_once(self.on_timer_finish, secs, context=timer_id)
        # –°—Ç–∞–≤–∏–º –¥–∂–æ–±—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        progress_job = self.job_queue.run_repeating(self.on_progress_tick, interval=1.0, first=1.0, context=timer_id)

        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã job
        entry["finish_job_name"] = finish_job.name
        entry["progress_job_name"] = progress_job.name
        self.storage.save()

        self.logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä (id={timer_id}) –Ω–∞ {secs} —Å–µ–∫ –¥–ª—è chat={chat_id}")

    def start_repeating_timer(self, chat_id: int, secs: int):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä (–∫–∞–∂–¥—ã–µ secs)."""
        start_ts = time.time()
        timer_id = self.storage.allocate_new_id()

        text = f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ {secs} —Å–µ–∫!\n"
        kb = [[InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"cancel_timer:{timer_id}")]]
        msg = self.updater.bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup(kb))

        entry = {
            "id": timer_id,
            "chat_id": chat_id,
            "interval": secs,
            "start": int(start_ts),
            "message_id": msg.message_id,
            "repeating": True
        }
        self.storage.add_repeat_timer(entry)
        # –°—Ç–∞–≤–∏–º repeating-job
        job = self.job_queue.run_repeating(self.on_repeat_tick, interval=secs, first=secs, context=timer_id)
        entry["job_name"] = job.name
        self.storage.save()

        self.logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä (id={timer_id}), –∫–∞–∂–¥—ã–µ {secs} —Å–µ–∫—É–Ω–¥")

    def cancel_timer(self, chat_id: int, timer_id: int, from_callback=False, message_id=None):
        """
        –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ (–ª–∏–±–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è).
        –£–¥–∞–ª—è–µ–º –∏–∑ storage, —É–±–∏–≤–∞–µ–º job-—ã, –ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–∏—à–µ–º ¬´–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω!¬ª.
        """
        # –°–º–æ—Ç—Ä–∏–º –≤ active
        timer = self.storage.get_active_timer(timer_id)
        if timer:
            # —É–±–∏—Ä–∞–µ–º –∏–∑ active
            self.storage.remove_active_timer(timer_id)
            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º job
            finish_job_name = timer.get("finish_job_name")
            progress_job_name = timer.get("progress_job_name")
            if finish_job_name:
                job = self.job_queue.get_jobs_by_name(finish_job_name)
                if job:
                    job[0].schedule_removal()
            if progress_job_name:
                job = self.job_queue.get_jobs_by_name(progress_job_name)
                if job:
                    job[0].schedule_removal()

            if message_id:
                try:
                    # –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
                    self.updater.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
                except:
                    pass
            self.updater.bot.send_message(chat_id, "üõë –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω!")
            self.storage.save()
            return

        # –°–º–æ—Ç—Ä–∏–º –≤ repeat
        rep_timer = self.storage.get_repeat_timer(timer_id)
        if rep_timer:
            self.storage.remove_repeat_timer(timer_id)
            jn = rep_timer.get("job_name")
            if jn:
                job = self.job_queue.get_jobs_by_name(jn)
                if job:
                    job[0].schedule_removal()
            if message_id:
                try:
                    self.updater.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
                except:
                    pass
            self.updater.bot.send_message(chat_id, "üõë –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω!")
            self.storage.save()
            return

        # –ù–µ –Ω–∞—à–ª–∏
        self.updater.bot.send_message(chat_id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω/–∑–∞–≤–µ—Ä—à—ë–Ω!")

    def on_timer_finish(self, context: CallbackContext):
        """
        –ö–æ–≥–¥–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è job_queue.run_once(...).
        """
        job = context.job
        timer_id = job.context
        tinfo = self.storage.get_active_timer(timer_id)
        if not tinfo:
            return  # —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω
        chat_id = tinfo["chat_id"]
        # –£–¥–∞–ª—è–µ–º –∏–∑ active, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ completed
        self.storage.remove_active_timer(timer_id)
        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å job
        pjname = tinfo.get("progress_job_name")
        if pjname:
            prjobs = self.job_queue.get_jobs_by_name(pjname)
            if prjobs:
                prjobs[0].schedule_removal()
        # –ó–∞–ø–∏—à–µ–º –≤ completed
        completed = {
            "id": timer_id,
            "chat_id": chat_id,
            "duration": tinfo["duration"],
            "finished_at": int(time.time()),
            "repeating": False
        }
        self.storage.add_completed_timer(completed)
        self.storage.save()
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
        msg_id = tinfo["message_id"]
        try:
            self.updater.bot.edit_message_reply_markup(chat_id, msg_id, reply_markup=None)
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # –ó–≤—É–∫
        sound_choice = self.storage.data["settings"].get("sound")  # e.g. "bell"
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª, –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ/voice
        # –ü–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è —Å–∏–º–≤–æ–ª–æ–º
        if sound_choice == "bell":
            prefix = "üîî"
        elif sound_choice == "siren":
            prefix = "üì¢"
        elif sound_choice == "melody":
            prefix = "üéµ"
        else:
            prefix = "‚è∞"

        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª –∏ ¬´–û—Ç–ª–æ–∂–∏—Ç—å¬ª
        kb = [[
            InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_timer:{timer_id}"),
            InlineKeyboardButton("‚ûï –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω", callback_data=f"snooze_timer:{timer_id}")
        ]]
        self.updater.bot.send_message(chat_id, f"{prefix} –í—Ä–µ–º—è –≤—ã—à–ª–æ!", reply_markup=InlineKeyboardMarkup(kb))

    def on_repeat_tick(self, context: CallbackContext):
        """
        –ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–í—Ä–µ–º—è –≤—ã—à–ª–æ!", –Ω–æ –Ω–µ —É–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä.
        """
        job = context.job
        timer_id = job.context
        tinfo = self.storage.get_repeat_timer(timer_id)
        if not tinfo:
            return  # —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω
        chat_id = tinfo["chat_id"]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        sound_choice = self.storage.data["settings"].get("sound")
        if sound_choice == "bell":
            prefix = "üîî"
        elif sound_choice == "siren":
            prefix = "üì¢"
        elif sound_choice == "melody":
            prefix = "üéµ"
        else:
            prefix = "‚è∞"

        self.updater.bot.send_message(chat_id, f"{prefix} –ü–æ–≤—Ç–æ—Ä! –ò–Ω—Ç–µ—Ä–≤–∞–ª: {tinfo['interval']} —Å–µ–∫.")

    def on_progress_tick(self, context: CallbackContext):
        """
        –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞:
        "–û—Å—Ç–∞–ª–æ—Å—å: XXX —Å–µ–∫" + progressbar
        """
        job = context.job
        timer_id = job.context
        tinfo = self.storage.get_active_timer(timer_id)
        if not tinfo:
            # —Ç–∞–π–º–µ—Ä —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω
            job.schedule_removal()
            return
        chat_id = tinfo["chat_id"]
        msg_id = tinfo["message_id"]
        start = tinfo["start"]
        dur = tinfo["duration"]
        end_ts = tinfo["end_ts"]
        now = time.time()
        left = int(end_ts - now)
        if left < 0:
            left = 0
        bar = progressbar.render_progressbar(dur, left)
        text = f"–¢–∞–π–º–µ—Ä –Ω–∞ {dur} —Å–µ–∫!\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {left} —Å–µ–∫—É–Ω–¥\n{bar}"
        kb = [[InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"cancel_timer:{timer_id}")]]
        try:
            context.bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=InlineKeyboardMarkup(kb)
            )
        except:
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            job.schedule_removal()

    def repeat_finished_timer(self, chat_id: int, timer_id: int, message_id: int):
        """
        –ù–∞–∂–∞–ª–∏ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞.
        –ò—â–µ–º duration –≤ completed.
        """
        c = self.storage.find_completed(timer_id)
        if not c:
            self.updater.bot.send_message(chat_id, "–ù–µ –º–æ–≥—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å: –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ—É –æ —Ç–∞–π–º–µ—Ä–µ.")
            return
        dur = c["duration"]
        # –°—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        self.start_one_time_timer(chat_id, dur)
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            self.updater.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        except:
            pass

    def snooze_timer(self, chat_id: int, timer_id: int, message_id: int):
        """
        –ù–∞–∂–∞–ª–∏ ¬´–û—Ç–ª–æ–∂–∏—Ç—å¬ª: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä, —Å–∫–∞–∂–µ–º, –Ω–∞ 300 —Å–µ–∫—É–Ω–¥
        """
        c = self.storage.find_completed(timer_id)
        if not c:
            self.updater.bot.send_message(chat_id, "–ù–µ –º–æ–≥—É –æ—Ç–ª–æ–∂–∏—Ç—å: –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ—É –æ —Ç–∞–π–º–µ—Ä–µ.")
            return
        # 5 –º–∏–Ω
        self.start_one_time_timer(chat_id, 5 * 60)
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            self.updater.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        except:
            pass
        self.updater.bot.send_message(chat_id, "–û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 5 –º–∏–Ω—É—Ç!")

    def restore_timers(self):
        """
        –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ/–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–∞–π–º–µ—Ä—ã –∏–∑ storage.
        """
        data = self.storage.data
        now = time.time()

        # 1) –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ
        active_list = data["active"]
        to_remove = []
        for t in active_list:
            end_ts = t["end_ts"]
            left = end_ts - now
            if left <= 0:
                # —É–∂–µ –∏—Å—Ç—ë–∫ -> –ø–µ—Ä–µ–Ω–µ—Å—ë–º –≤ completed
                c = {
                    "id": t["id"],
                    "chat_id": t["chat_id"],
                    "duration": t["duration"],
                    "finished_at": int(now),
                    "repeating": False
                }
                data["completed"].append(c)
                to_remove.append(t["id"])
            else:
                # –ù—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
                finish_job = self.job_queue.run_once(self.on_timer_finish, when=left, context=t["id"])
                prog_job = self.job_queue.run_repeating(self.on_progress_tick, interval=1.0, first=1.0, context=t["id"])
                t["finish_job_name"] = finish_job.name
                t["progress_job_name"] = prog_job.name

        # –£–±–∏—Ä–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –∏–∑ active
        for rid in to_remove:
            self.storage.remove_active_timer(rid)
        # 2) –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
        rep_list = data["repeat"]
        for r in rep_list:
            interval = r["interval"]
            job = self.job_queue.run_repeating(self.on_repeat_tick, interval=interval, first=interval, context=r["id"])
            r["job_name"] = job.name
        self.storage.save()

    # –£—Ç–∏–ª–∏—Ç—ã
    def _format_duration(self, secs: int):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã -> —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–Ω–∞–ø—Ä. 1h5m)."""
        # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ø—Ä–∏–∫–æ–ª—å–Ω–µ–µ
        if secs < 60:
            return f"{secs}—Å"
        if secs < 3600:
            mins = secs // 60
            s = secs % 60
            return f"{mins}–º{'' if s==0 else str(s)+'—Å'}"
        hours = secs // 3600
        rem = secs % 3600
        mins = rem // 60
        s = rem % 60
        if hours < 24:
            return f"{hours}—á{'' if mins==0 else str(mins)+'–º'}"
        # –ï—Å–ª–∏ > 24—á
        days = hours // 24
        h2 = hours % 24
        return f"{days}–¥{h2}—á"